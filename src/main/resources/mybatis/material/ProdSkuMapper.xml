<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.damei.business.dao.material.ProdSkuDao">
    <resultMap id="BaseResultMap" type="ProdSku">
        <id column="id" property="id"/>
        <result column="code" property="code"/>
        <result column="name" property="name"/>
        <result column="product_id" property="productId"/>
        <result column="supplier_id" property="supplierId"/>
        <result column="attribute1" property="attribute1"/>
        <result column="attribute2" property="attribute2"/>
        <result column="attribute3" property="attribute3"/>
        <result column="process_status" property="processStatus"/>
        <result column="stock" property="stock"/>
        <result column="brand_id" property="productBrandId"/>
    </resultMap>
    <resultMap id="BaseWithPriceResultMap" type="ProdSku" extends="BaseResultMap">
        <result column="model" property="productModel"/>
        <result column="spec" property="productSpec"/>
        <result column="brand_name" property="productBrandName"/>
        <result column="category_name" property="productCatalogName"/>
        <result column="priceFlag" property="priceFlag"/>
        <result column="unit_name" property="unitName"/>
    </resultMap>

    <resultMap id="BaseWithPriceResultByTypeMap" type="ProdSku" extends="BaseWithPriceResultMap">
        <result column="label1" property="label1"/>
        <result column="label2" property="label2"/>
        <result column="label3" property="label3"/>
        <result column="price" property="price"/>
        <result column="img_path" property="imgPath"/>
        <result column="productCategoryUrl" property="productCategoryUrl"/>
    </resultMap>

    <resultMap id="BaseWithPriceMap" type="ProdSku" extends="BaseWithPriceResultMap">
        <result column="model" property="productModel"/>
        <result column="spec" property="productSpec"/>
        <result column="label1" property="label1"/>
        <result column="label2" property="label2"/>
        <result column="label3" property="label3"/>
        <result column="brand_name" property="productBrandName"/>
        <result column="price" property="price"/>
    </resultMap>

    <sql id="Base_Column_List">
    id, code, name, product_id, supplier_id, attribute1, attribute2, attribute3, process_status, 
    stock
  </sql>
    <select id="getById" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from prod_sku
        where id = #{id}
    </select>
    <delete id="deleteById">
    delete from prod_sku
    where id = #{id}
  </delete>
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into prod_sku
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="code != null">
                code,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="productId != null">
                product_id,
            </if>
            <if test="supplierId != null">
                supplier_id,
            </if>
            <if test="attribute1 != null">
                attribute1,
            </if>
            <if test="attribute2 != null">
                attribute2,
            </if>
            <if test="attribute3 != null">
                attribute3,
            </if>
            <if test="processStatus != null">
                process_status,
            </if>
            <if test="stock != null">
                stock,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="code != null">
                #{code},
            </if>
            <if test="name != null">
                #{name},
            </if>
            <if test="productId != null">
                #{productId},
            </if>
            <if test="supplierId != null">
                #{supplierId},
            </if>
            <if test="attribute1 != null">
                #{attribute1},
            </if>
            <if test="attribute2 != null">
                #{attribute2},
            </if>
            <if test="attribute3 != null">
                #{attribute3},
            </if>
            <if test="processStatus != null">
                #{processStatus},
            </if>
            <if test="stock != null">
                #{stock},
            </if>
        </trim>
    </insert>
    <update id="update">
        update prod_sku
        <set>
            <if test="code != null">
                code = #{code},
            </if>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="productId != null">
                product_id = #{productId},
            </if>
            <if test="supplierId != null">
                supplier_id = #{supplierId},
            </if>
            <if test="attribute1 != null">
                attribute1 = #{attribute1},
            </if>
            <if test="attribute2 != null">
                attribute2 = #{attribute2},
            </if>
            <if test="attribute3 != null">
                attribute3 = #{attribute3},
            </if>
            <if test="processStatus != null">
                process_status = #{processStatus},
            </if>
            <if test="stock != null">
                stock = #{stock},
            </if>
        </set>
        where id = #{id}
    </update>

    <select id="countSkuPriceTotal" parameterType="map" resultType="java.lang.Long">
        SELECT COUNT(*) FROM (  SELECT DISTINCT sku.*,prod.model,prod.spec,pb.brand_name,proc.name AS category_name ,pp.priceFlag
        <include refid="skuPriceListWhere"/>
        ) AS  ssdd
    </select>

    <select id="findSkuPriceList" parameterType="map" resultMap="BaseWithPriceResultMap">
        SELECT DISTINCT sku.*,prod.model,prod.spec,pb.brand_name,proc.name AS category_name ,pp.priceFlag,dic.name AS unit_name
        <include refid="skuPriceListWhere"/>
        <if test="sort != null">
            ORDER BY
            <foreach collection="sort" item="order" separator=",">
                ${order.property} ${order.direction}
            </foreach>
        </if>
        limit #{offset},#{pageSize}
    </select>


    <sql id="skuPriceListWhere">
        from prod_sku sku JOIN prod_product prod ON (product_id = prod.id)
        LEFT JOIN prod_catalog proc ON (prod.category_url = proc.url)
        LEFT JOIN (
        SELECT
        sku_id,
        GROUP_CONCAT(price_type) priceFlag
        FROM
        prod_sku_price
        GROUP BY
        sku_id
        ) pp ON sku.id = pp.sku_id
        LEFT JOIN prod_brand pb ON prod.brand_id = pb.id
        LEFT JOIN acct_user au ON sku.supplier_id=au.supplier_id
        LEFT JOIN  dict_measure_unit  dic ON dic.id=prod.measure_unit_id
        <where>
            sku.process_status='sku_shelf_shelves'
            <if test="allStoreCode != null">
                AND au.store_code = #{allStoreCode}
            </if>
            <if test="allSupplierId!=null or supplierId!=null ">
            AND
            prod.supplier_id IN (
            SELECT
            ps.id
            FROM
            prod_supplier ps
            LEFT JOIN region_supplier rs ON rs.id = ps.region_supplier_id
            LEFT JOIN store s ON s.code = rs.store_code
            <where>
                <if test="allSupplierId != null">
                    AND rs.id = #{allSupplierId}
                </if>
                <if test="supplierId!= null">
                    AND ps.id = #{supplierId}
                </if>
            </where>
            )
            </if>
            <if test="keyword != null">
                AND (sku.name LIKE concat('%',#{keyword},'%') OR prod.model LIKE concat('%',#{keyword},'%'))
            </if>
            <if test="productId != null">
                AND product_id = #{productId}
            </if>
            <if test="catalogUrl != null">
                AND category_url LIKE concat(#{catalogUrl},'%')
            </if>
            <if test="brandId != null">
                AND brand_id = #{brandId}
            </if>
        </where>
    </sql>

    <select id="countfindSkuPriceListByTypeTotal" parameterType="map" resultType="java.lang.Long">
        SELECT COUNT(*) FROM ( SELECT  DISTINCT  sku.* , prod.model,
        prod.spec,prod.category_url AS  productCategoryUrl,
        pb.brand_name,
        proc.NAME AS category_name,
        pp.price,
        psl.attribute1_name AS label1,
        psl.attribute2_name AS label2,
        psl.attribute3_name AS label3,
        ppi.img_path,
        dmu.name AS unit_name
        <include refid="findSkuPriceListByTypeWhere"/>
        ) as ssdd
    </select>

    <select id="findSkuPriceListByType" parameterType="map" resultMap="BaseWithPriceResultMap">
        SELECT DISTINCT
        sku.*, prod.model,
        prod.spec,prod.category_url AS  productCategoryUrl,
        pb.brand_name,
        prod.brand_id,
        proc.NAME AS category_name,
        pp.price,
        psl.attribute1_name AS label1,
        psl.attribute2_name AS label2,
        psl.attribute3_name AS label3,
        ppi.img_path,
        dmu.name AS unit_name
        <include refid="findSkuPriceListByTypeWhere"/>
        <if test="sort != null">
            ORDER BY
            <foreach collection="sort" item="order" separator=",">
                ${order.property} ${order.direction}
            </foreach>
        </if>
        limit #{offset},#{pageSize}
    </select>


    <sql id="findSkuPriceListByTypeWhere">
        FROM
        (
        SELECT
        s.*, CONCAT(
        substring_index(p.category_url, '-', 2),
        '-'
        ) AS secondUrl
        FROM
        prod_sku s
        LEFT JOIN prod_product p ON p.id = s.product_id
        LEFT JOIN acct_user au ON s.supplier_id=au.supplier_id
        <where>
            au.store_code=#{storeCode}
            <if test="keyword != null">
                AND (s.name LIKE concat('%',#{keyword},'%') OR p.model LIKE concat('%',#{keyword},'%'))
            </if>
            <if test="catalogUrl != null">
                AND p.category_url LIKE concat(#{catalogUrl},'%')
            </if>
            <if test="brandId != null">
                AND p.brand_id = #{brandId}
            </if>
        </where>
        ) sku
        LEFT JOIN prod_product prod ON (product_id = prod.id)
        LEFT JOIN prod_catalog proc ON (prod.category_url = proc.url)
        LEFT JOIN prod_sku_meta psl ON prod.id = psl.product_id
        <if test="priceType == &quot;SALE&quot;">
        LEFT JOIN prod_catalog procc ON (procc.url = sku.secondUrl)
        </if>
        JOIN (
        SELECT
        psp.sku_id,psp.price
        FROM
        prod_sku_price psp
         JOIN (
        SELECT
        sku_id,
        max(price_start_date) AS curentPriceDate
        FROM
        prod_sku_price
        WHERE
        price_type = #{priceType}
        AND price_start_date &lt;= #{date}
        GROUP BY
        sku_id

        ) pspp ON psp.sku_id = pspp.sku_id
        AND psp.price_start_date = pspp.curentPriceDate
        WHERE
        psp.price_type = #{priceType}
        ) pp ON sku.id = pp.sku_id
        LEFT JOIN prod_brand pb ON prod.brand_id = pb.id
        LEFT JOIN prod_product_image ppi ON sku.id=ppi.sku_id
        LEFT JOIN  dict_measure_unit dmu ON  prod.measure_unit_id=dmu.id
        <where>
            pp.price IS NOT NULL
            AND sku.process_status='sku_shelf_shelves'
            <if test="priceType == &quot;SALE&quot;">
                AND procc.meal_category=1
            </if>
        </where>
    </sql>






    <select id="findStoreList" resultType="map">
        SELECT code, name FROM store
        ORDER BY  id
    </select>
    <select id="findRegionSupplierByStoreCode" resultType="map">
        SELECT id,region_name AS  name FROM region_supplier
        WHERE status='OPEN' AND store_code=#{code}
    </select>
    <select id="findSupplierByRegionId" resultType="map">
         SELECT id,name FROM prod_supplier
         WHERE status='OPEN' AND region_supplier_id=#{id}
    </select>
    <select id="findAllBrand" resultType="map">
         SELECT id,brand_name AS name FROM prod_brand
         WHERE status='OPEN'
    </select>
    <select id="findCatalogFirstList" resultType="map">
         SELECT url,name AS name FROM prod_catalog
         WHERE status='OPEN' AND parent_id=0
    </select>
    <select id="findCatalogListByUrl" resultType="map">
         SELECT url,name AS name FROM prod_catalog
         WHERE status='OPEN' AND parent_id=(
         SELECT id FROM  prod_catalog WHERE url=#{url}
         )
    </select>

    <select id="findSkuListByCodeList" resultMap="BaseResultMap">
        SELECT * FROM prod_sku WHERE code in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>
    <select id="getByIdAndType" resultMap="BaseWithPriceMap">
        SELECT
        sku.*,psku.price,pb.brand_name, prod.model, prod.spec,
        psl.attribute1_name AS label1,
        psl.attribute2_name AS label2,
        psl.attribute3_name AS label3
        FROM
        prod_sku sku
        LEFT JOIN (
        SELECT
        *
        FROM
        prod_sku_price
        WHERE
        price_type = #{type}
        AND sku_id=#{id}
        AND price_start_date &lt;=#{date}
        ORDER BY  price_start_date DESC
        LIMIT 1
        ) psku
        ON sku.id=psku.sku_id
        LEFT JOIN prod_product prod ON (sku.product_id = prod.id)
        LEFT JOIN prod_sku_meta psl ON prod.id = psl.product_id
        LEFT JOIN prod_brand pb ON prod.brand_id = pb.id
        WHERE sku.id=#{id}
    </select>
    <select id="findByIdAndType" resultMap="BaseWithPriceMap" >
        SELECT DISTINCT sku.*,prod.model,prod.spec,pb.brand_name,proc.name AS category_name,pp.price,
        psl.attribute1_name AS label1,
        psl.attribute2_name AS label2,
        psl.attribute3_name AS label3
        from prod_sku sku JOIN prod_product prod ON (product_id = prod.id)
        LEFT JOIN prod_catalog proc ON (prod.category_url = proc.url)
        LEFT JOIN (
        SELECT
        *
        FROM
        prod_sku_price
        WHERE
        price_type = #{type}
        AND price_start_date &lt;=#{date}
        )
        pp ON sku.id = pp.sku_id
        LEFT JOIN prod_brand pb ON prod.brand_id = pb.id
        LEFT JOIN acct_user au ON sku.supplier_id = au.supplier_id
        LEFT JOIN prod_sku_meta psl ON prod.id = psl.product_id
        LEFT JOIN (
        SELECT
        sku_id,MAX(price_start_date) AS start_date
        FROM
        prod_sku_price
        WHERE
        price_type =  #{type}
        AND price_start_date &lt;=#{date}
        GROUP BY sku_id
        ) store ON store.sku_id=sku.id
        <where>
            sku.process_status='sku_shelf_shelves'
            AND store.start_date=pp.price_start_date
            AND prod.supplier_id IN (
            SELECT
            ps.id
            FROM
            prod_supplier ps
            LEFT JOIN region_supplier rs ON rs.id = ps.region_supplier_id
            LEFT JOIN store s ON s.code = rs.store_code
            <where>
                <if test="allStoreCode != null">
                    AND s.code = #{allStoreCode}
                </if>
                <if test="allSupplierId != null">
                    AND rs.id = #{allSupplierId}
                </if>
                <if test="supplierId!= null">
                    AND ps.id = #{supplierId}
                </if>
            </where>
            )
            <if test="keyword != null">
                AND (sku.name LIKE concat('%',#{keyword},'%') OR prod.model LIKE concat('%',#{keyword},'%'))
            </if>
            <if test="productId != null">
                AND product_id = #{productId}
            </if>
            <if test="catalogUrl != null">
                AND category_url LIKE concat(#{catalogUrl},'%')
            </if>
            <if test="brandId != null">
                AND brand_id = #{brandId}
            </if>
        </where>
    </select>

</mapper>